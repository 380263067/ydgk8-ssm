<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- SpringMVC 的配置文件-->
    <!--配置自动扫描的包-->
    <!--
        因为在SpringMVC中只有 @Controller 注解和 @ControllerAdvice 注解修饰的注解才交给
        SpringMVC进行管理，
        只去配置SpringMVC自动扫描的包扫描这两个注解修饰的组件

       use-default-filters： 表示是否使用默认的过滤模式 @Controller @Service @Repository @Component
    -->
    <context:component-scan base-package="com.ydgk.crowd" use-default-filters="false">
        <!-- context:include-filter： 指定只去扫描哪些组件 -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:include-filter>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"></context:include-filter>
        <context:include-filter type="assignable" expression="com.ydgk.crowd.config.CrowdSecurityConfig"></context:include-filter>
    </context:component-scan>

    <!--
    配置视图解析器
        InternalResourceViewResolver 是一个非常常用的视图解析器，主要用来做请求转发，并将模型数据
        放入请求域的。
    -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--静态资源的处理-->
    <!--<mvc:default-servlet-handler></mvc:default-servlet-handler>-->

    <!--配置 SpringMVC 的注解驱动-->
    <mvc:annotation-driven/>

    <!--配置基于 XML 的异常映射-->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!--key:指定异常类型，值表示去哪个异常页面-->
                <prop key="java.lang.ArithmeticException">errors/system-error</prop>
                <!--以后可以制定异常，当指定的异常出现时去那个页面-->
                <prop key="com.ydgk.ssm.exceptions.AccessForbiddenException">pages/admin-login</prop>
                <prop key="java.lang.Exception">errors/system-error</prop>
            </props>
        </property>
    </bean>

    <!--
    配置视图映射
        @RequestMapping("/to/admin-login.html")
        public String toAdminLogin(){
            return "pages/admin-login";
        }
    -->
    <mvc:view-controller path="/admin/to/admin-login.html" view-name="pages/admin-login"></mvc:view-controller>
    <mvc:view-controller path="/admin/to/main.html" view-name="pages/main"></mvc:view-controller>
    <mvc:view-controller path="/admin/to/input.html" view-name="pages/admin-add"></mvc:view-controller>

    <mvc:view-controller path="/role/to/role-list.html" view-name="pages/role-list"></mvc:view-controller>
    <mvc:view-controller path="/menu/to/menu.html" view-name="pages/menu"></mvc:view-controller>

    <!--注册拦截器-->
    <!--<mvc:interceptors>-->
        <!--<mvc:interceptor>-->
            <!--&lt;!&ndash;指定拦截器拦截哪些资源&ndash;&gt;-->
            <!--<mvc:mapping path="/**"/>-->
            <!--&lt;!&ndash;设置不被拦截的请求&ndash;&gt;-->
            <!--<mvc:exclude-mapping path="/admin/do/doLogin.html"></mvc:exclude-mapping>-->
            <!--<mvc:exclude-mapping path="/admin/to/admin-login.html"></mvc:exclude-mapping>-->
            <!--<mvc:exclude-mapping path="/admin/do/doLogout.html"></mvc:exclude-mapping>-->
            <!--<bean class="com.ydgk.crowd.interceptors.LoginCheckInterceptor"></bean>-->
        <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->
</beans>