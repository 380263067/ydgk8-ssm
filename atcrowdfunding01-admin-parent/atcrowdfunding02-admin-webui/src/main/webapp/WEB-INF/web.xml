<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

  <!--
    字符编码过滤器 可以有效解决中文乱码

    注意： 字符编码过滤器一定要在所有过滤器配置之前配置
  -->
  <filter>
    <filter-name>EncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <!--配置字符编码过滤器的初始化参数-->
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <!--是否对请求进行强制编码-->
    <init-param>
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <!--是否对响应进行强制编码-->
    <init-param>
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>EncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--配置支持PUT或DELETE请求的过滤器-->
  <filter>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!--配置启动Spring IOC 容器的监听器-->
  <!--配置Spring核心配置文件的路径-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring-persist-*.xml</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--配置SpringMVC的Servlet-->
  <servlet>
    <servlet-name>DispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--指定SpringMVC配置文件的路径-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-web-*.xml</param-value>
    </init-param>
    <!--
      表示在web应用启动的哪个时机加载Servlet
        值越小，表示越先被加载。
        如果为正值，表示tomcat容器启动的时候就会加载
        如果为负值，表示使用到该 Servlet 时才会被加载
    -->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>DispatcherServlet</servlet-name>
    <!--
      那些请求可以交给 DispatcherServlet 进行处理   /  <mvc:default-servlet-handler>
        使用后缀映射请求：
          好处： 1、静态资源就不需要处理了
                2、可以实现“伪静态”
          缺陷：不符合 RESTFUL 风格
          如果你访问的请求返回的是一个 json 数据格式的内容，使用 xxx.html 方式访问会出现 406 页面
    -->
    <url-pattern>*.html</url-pattern>
    <!--为了解决ajax访问时可能出现的406，所有的ajax请求都以.json方式发送-->
    <url-pattern>*.json</url-pattern>
  </servlet-mapping>

</web-app>